// <auto-generated />
using System;
using Freelance.Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Freelance.Core.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220929140954_UpdateFilesAddCreatedByUser")]
    partial class UpdateFilesAddCreatedByUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("freelance")
                .HasAnnotation("Npgsql:CollationDefinition:public.case_insensitive", "@colStrength=primary,@colStrength=primary,icu,False")
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Freelance.Core.Models.Storage.File", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("integer")
                        .HasColumnName("created_by");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("display_name");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("file_name");

                    b.Property<int>("GroupType")
                        .HasColumnType("integer")
                        .HasColumnName("group_type");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("mime_type");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("unique_identifier")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("ix_files_created_by");

                    b.HasIndex("UniqueIdentifier")
                        .IsUnique()
                        .HasDatabaseName("ix_uq_file");

                    b.ToTable("files", "freelance");
                });

            modelBuilder.Entity("Freelance.Core.Models.Storage.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("boolean")
                        .HasColumnName("is_banned");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("password");

                    b.Property<int?>("PhotoFileId")
                        .HasColumnType("integer")
                        .HasColumnName("photo_file_id");

                    b.Property<decimal>("Rating")
                        .HasColumnType("numeric(1,1)")
                        .HasColumnName("rating");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<Guid>("UniqueIdentifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("unique_identifier")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTimeOffset>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("PhotoFileId")
                        .HasDatabaseName("ix_users_photo_file_id");

                    b.HasIndex("UniqueIdentifier")
                        .IsUnique()
                        .HasDatabaseName("ix_uq_user");

                    b.ToTable("users", "freelance");
                });

            modelBuilder.Entity("Freelance.Core.Models.Storage.File", b =>
                {
                    b.HasOne("Freelance.Core.Models.Storage.User", null)
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_files_users_user_id");
                });

            modelBuilder.Entity("Freelance.Core.Models.Storage.User", b =>
                {
                    b.HasOne("Freelance.Core.Models.Storage.File", null)
                        .WithMany()
                        .HasForeignKey("PhotoFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_users_files_file_id");
                });
#pragma warning restore 612, 618
        }
    }
}
